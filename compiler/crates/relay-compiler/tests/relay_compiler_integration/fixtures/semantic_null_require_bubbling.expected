==================================== INPUT ====================================
//- PersonComponent.js
graphql`fragment PersonComponentFragment on Query @throwOnFieldError {
  some_person {
    name @required(action: LOG)
  }
}`

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql"
}

//- schema.graphql
type Query {
  some_person: Person @semanticNonNull
}

type Person {
  name: String
}
==================================== OUTPUT ===================================
//- __generated__/PersonComponentFragment.graphql.js
/**
 * <auto-generated> SignedSource<<dd96467e5b9c67cd6e9fef4590fc9adb>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type PersonComponentFragment$fragmentType: FragmentType;
export type PersonComponentFragment$data = {|
  +some_person: ?{|
    +name: string,
  |},
  +$fragmentType: PersonComponentFragment$fragmentType,
|};
export type PersonComponentFragment$key = {
  +$data?: PersonComponentFragment$data,
  +$fragmentSpreads: PersonComponentFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": {
    "throwOnFieldError": true
  },
  "name": "PersonComponentFragment",
  "selections": [
    {
      "alias": null,
      "args": null,
      "concreteType": "Person",
      "kind": "LinkedField",
      "name": "some_person",
      "plural": false,
      "selections": [
        {
          "kind": "RequiredField",
          "field": {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "name",
            "storageKey": null
          },
          "action": "LOG"
        }
      ],
      "storageKey": null
    }
  ],
  "type": "Query",
  "abstractKey": null
};

(node/*: any*/).hash = "76fce3bfedd135a11ccda0abc265eb69";

export default ((node/*: any*/)/*: Fragment<
  PersonComponentFragment$fragmentType,
  PersonComponentFragment$data,
>*/);
